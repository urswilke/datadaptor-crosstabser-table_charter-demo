---
title: "datadaptor-crosstabser-table_charter-demo"
project:
  type: website
format: 
  live-html:
    page-layout: full
    code-links: repo
    toc: true
    toc-location: left
    number-sections: true
    css: styles.css
    code-link: true
engine: knitr
webr:
  repos:
    - https://urswilke.r-universe.dev
  cell-options:
    autorun: true
  packages: ['datadaptor', 'crosstabser']
include-before-body:
  text: |
    <script type="module"> 
      import { TableCharter } from "https://unpkg.com/table_charter/dist/main.es.js"
    </script>
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

## Introduction

::: callout-note
Please be patient! It will take a little while until everything is set up and you can run the code in the interactive cells.[^1]
:::

[^1]: This website is built with the [quarto-live](https://r-wasm.github.io/quarto-live/) extension 
  and the [webr](https://github.com/r-wasm/webr/) wasm versions of the R packages 
  from [R-universe](https://urswilke.r-universe.dev/builds). 
  If you install the R packages on your PC, the code runs much faster.

This interactive demo shows the combined use of the R packages 
[datadaptor](https://gitlab.com/urswilke/datadaptor) & 
[crosstabser](https://gitlab.com/urswilke/crosstabser), 
and the javascript [table_charter](https://gitlab.com/urswilke/table_charter) app
to tabulate & plot labelled survey data (or any data.frame).

* In @sec-spreadsheet-playground you can change or enter new commands 
  for datadaptor & crosstabser.
* Editing triggers the execution of the code in @sec-calc-ct which
  * prints the calculated crosstabs,
  * & recalculates the data input of the table_charter app in @sec-tab-ch.

We'll first load the R packages.

```{r}
#| eval: false
library(datadaptor)
library(crosstabser)
```

## Using datadaptor & crosstabser

```{ojs}
//| echo: false
import {createTable, observeTable} from '@parlant/editable-table'
```

### Survey data

The package data set `datadaptor::fruit_survey` is used as a toy example for our survey data `df`.
In real life, you would typically receive such data in an SPSS .sav file:

```{webr}
#| persist: true
df <- datadaptor::fruit_survey
df
```

### Modification & tabulation

* The standard usage of datadaptor & crosstabser is with Excel files 
  that can be created with `create_mapping()` & `create_tabula()`, respectively. 
* In order to allow you to play around we use the following editable tables, 
  instead of an Excel file. 
* Please refer to 
  [this](https://urswilke.gitlab.io/crosstabser/articles/crosstabser#mapping-file-content)
  article for a short description of what the commands do.
* If you edit the tables in @sec-spreadsheet-playground, 
  they are automatically translated into 
  the R data.frame list entries of `mapping_file` in @sec-calc-ct 
  and trigger a reactive update of that code cell.


#### Data modification

The first 3 tables `Variables`, `Label` & `Free1` in @sec-spreadsheet-playground 
show some examples how you can modify the data.

#### Tabulation

* The table in the sheet `Questions` in @sec-spreadsheet-playground
  has the code to generate the tables along the y-axis of the crosstabs.
* Please refer to 
  [this article](https://urswilke.gitlab.io/crosstabser/articles/questions-parameters.html) 
  for further explanation of the  arguments used in the column names.
* To define the columns along the x-axis of the crosstabs, 
  we just need to define a character vector of variable names in `df`. 
  Each of the variables' labelled values 
  will correspond to one column in the crosstabs:

```{webr}
#| persist: true
ColVar <-  c("kq2_1", "kq2_2", "kq2_3", "kq4", "kq5")
```



### Playground {#sec-spreadsheet-playground}

Here we simulate an Excel file with 4 sheets in our browser:

```{r}
#| echo: false
mapping_file <- system.file("extdata", "tabulate-fruits.xlsx", package = "crosstabser")
sheets <-   c("Variables", "Label", "Free1", "Macro", "Questions")

wb <- openxlsx2::wb_load(mapping_file)
l <- purrr::map2(
  sheets |> purrr::set_names(),
  c(TRUE, TRUE, FALSE, FALSE, TRUE),
  \(x, b) openxlsx2::read_xlsx(wb, x, col_names = b, ) |> 
    dplyr::mutate(across(-matches("(^nv$|sum_var_value)"), as.character)) |> 
    tibble::as_tibble()
)
l$Variables <- l$Variables
# |> 
#   dplyr::filter(if_any(c("new_label", "new_name", "op"), Negate(is.na)))
l$Label <- l$Label |>
  dplyr::filter(if_any(c("new_label", "sum_var_label", "sum_var_value", "sum_var_vallab"), Negate(is.na)))
new_names <- paste0("X", 1:5)
names(l$Free1) <- new_names
l$Free1 <- l$Free1 |> 
  dplyr::filter(if_any(all_of(new_names), Negate(is.na))) |> 
  purrr::set_names(LETTERS[1:5])
l$Macro <- l$Macro |> janitor::remove_empty("cols") |> _[1:2] |> tidyr::drop_na(E)
l$Questions <- l$Questions |> janitor::remove_empty("cols") |> janitor::remove_empty("rows")

names(l) <- paste0(names(l), "_orig")
not_needed <- list2env(l, globalenv())
```

::: {.panel-tabset}

#### Variables

```{r}
#| echo: false
ojs_define(Variables_orig)
```

```{ojs}
//| echo: false
variables_arr = transpose(Variables_orig)
variables_table = createTable(variables_arr, {headerEditable: false, appendRows: true})
Variables = observeTable(variables_table)
```

#### Label

```{r}
#| echo: false
ojs_define(Label_orig)
```

```{ojs}
//| echo: false
label_arr = transpose(Label_orig)
label_table = createTable(label_arr, {headerEditable: false, appendRows: true})
res_label = observeTable(label_table)
Label = res_label.map(
  ({
    nv,
    sum_var_value,
    ...rest
  }) =>({
    nv: Number(nv),
    sum_var_value: Number(sum_var_value),
    ...rest
  })
)
```

#### Free1

```{r}
#| echo: false
ojs_define(Free1_orig)
```

```{ojs}
//| echo: false
Free1_arr = transpose(Free1_orig)
Free1_table = createTable(Free1_arr, {headerEditable: false, appendRows: true})
res_Free1 = observeTable(Free1_table)
Free1 = res_Free1.map(
  ({
    A: X1,
    B: X2,
    C: X3,
    D: X4,
    E: X5,
  }) =>({
    X1, 
    X2, 
    X3, 
    X4, 
    X5
  })
)
```

#### Questions

```{r}
#| echo: false
ojs_define(Questions_orig)
```

```{ojs}
//| echo: false
Questions_arr = transpose(Questions_orig)
Questions_table = createTable(Questions_arr, {headerEditable: true, appendRows: true})
Questions = observeTable(Questions_table)
```

:::

*You can edit the above tables*[^auto-exec]

[^auto-exec]: ... and then see how that changes the results 
in @sec-calc-ct & @sec-tab-ch
after the re-execution/-initialization which should be triggered automatically.


## Calculate crosstabs {#sec-calc-ct}

If you have modified the input data above, running the code in the next cell will automatically:

- execute [`Mapping$modify_data()`](https://urswilke.gitlab.io/datadaptor/reference/Mapping.html#method-modify-data-)[^4]; the resulting data will be stored in the `dat_mod` field
- call [`Tabula$calc_qtabs()`](https://urswilke.gitlab.io/crosstabser/reference/Tabula.html#method-calc-qtabs-) to calculate the crosstabs.
- re`print()`[^5] the crosstabs to the console 
- recalculate the data input for the table_charter app in @sec-tab-ch

[^4]: ... as we pass `df` as the dat argument of the `Tabula` constructor
the `$modify_data()` method of its parent class is executed, 
see [here](https://urswilke.gitlab.io/crosstabser/reference/Tabula.html#method-new-).


[^5]: Unlike this wasm version in your browser, running the crosstabser R package in RStudio will give you a color-formatted print output. The formatting also works in the R console on Linux, but not on Windows.

```{webr}
#| persist: true
#| max-lines: 10
#| class: max-output-height
#| input:
#|   - Variables
#|   - Label
#|   - Free1
#|   - Questions
#| define:
#|   - data_string
# No need to understand the first section.
# For internal use!
# If somebody knows how to hide this in quarto, I'd love to know...:
f <- function(x) {
  x |> dplyr::mutate(across(
    -matches("(^nv$|sum_var_value)"),
    \(x) {x[x %in% c("", "\n")] <- NA_character_; x}
  ))
}
Variables <- Variables |> f()
Label <- Label |> f()
Free1 <- Free1 |> f() |> dplyr::mutate(row = dplyr::row_number())
Questions <- Questions |> f()



# We define the "mapping file" as an R list() object:
# cf. https://urswilke.gitlab.io/crosstabser/articles/crosstabser#alternative-use-without-excel:
mapping_file <- list(
  Variables = Variables,
  Label = Label,
  Free1 = Free1,
  Questions = Questions, 
  Macro = list(ColVar = ColVar)
) 

m <- Tabula$new(
  dat = df,
  # With an Excel mapping file, we would instead pass the file path here:
  mapping_file = mapping_file,
  # This will prevent the calculation to error out, 
  # if commands in the mapping yield an error:
  error_out = "safe"
)

print(m)

data_string <- m$get_crosstabs_data() |> gen_data_json()
```

## table_charter {#sec-tab-ch}


You can put the app in your document by adding a `<table-charter>` html tag 
with the crosstab data from R as its `data` attribute:

```{webr}
#| input:
#|   - data_string
#| edit: false
htmltools::tag(
  "table-charter", 
  list(data = data_string)
)

```
