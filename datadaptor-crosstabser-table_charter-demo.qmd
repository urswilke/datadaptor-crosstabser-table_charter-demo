---
title: "datadaptor-crosstabser-table_charter-demo"
project:
  type: website
format: 
  live-html:
    page-layout: full
    code-links: repo
    toc: true
    toc-location: left
    number-sections: true
engine: knitr
webr:
  repos:
    - https://urswilke.r-universe.dev
  cell-options:
    autorun: true
  packages: ['datadaptor', 'crosstabser', 'haven', 'jsonlite']
include-before-body:
  text: |
    <script type="module"> 
      import { TableCharter } from "https://unpkg.com/table_charter/dist/main.es.js"
    </script>
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}


## Introduction

::: callout-note
Please be patient! It will take a little while until everything is set
up and you can run the code in the interactive cells.[^1]
:::

[^1]: This website is built with the
    [quarto-live](https://r-wasm.github.io/quarto-live/) extension and
    the [webr](https://github.com/r-wasm/webr/) wasm versions of the R
    packages from [R-universe](https://urswilke.r-universe.dev/builds).
    If you install the R packages on your PC, the code runs much faster.

This interactive demo shows how the combination of the R packages
[datadaptor](https://gitlab.com/urswilke/datadaptor) &
[crosstabser](https://gitlab.com/urswilke/crosstabser) can be used to
calculate crosstabs from labelled survey data (or any data.frame). In
the javascript
[table_charter](https://gitlab.com/urswilke/table_charter) app you can
then interactively create plots of the crosstabs.

::: callout-note
Running the code cell in @sec-calc-ct will recalculate the crosstabs &
update the table_charter app in @sec-tab-ch.
:::

We'll load some R packages:

```{r}
#| eval: false
library(datadaptor)
library(crosstabser)
library(haven)
```


## Survey data

This is a toy example for survey data `df`. Typically, you would receive
this data in an SPSS .sav file:

```{webr}
#| autorun: true
df <- tibble::tibble(
    q1_1 = c(1, 0, 0, 0, 1) |> labelled(c(Selected = 1, Unselected = 0), label = "Choice 1 & 2"),
    q1_2 = c(1, 1, 0, 1, 0) |> labelled(c(Selected = 1, Unselected = 0), label = "Choice 1 & 2"),
    q1_3 = c(0, 1, 0, 0, 0) |> labelled(c(Selected = 1, Unselected = 0), label = "Choice 3 & 4"),
    q1_4 = c(1, 1, 1, 1, 1) |> labelled(c(Selected = 1, Unselected = 0), label = "Choice 3 & 4"),
    q1n1 = c(1, 2, 3, 2, 3) |> labelled(c(ch1=1, ch2=2, ch3 = 3, ch4=4), label = "Choice 1 & 2"),
    q1n2 = c(2,-2, 4,-2, 4) |> labelled(c(ch1=1, ch2=2, ch3 = 3, ch4=4), label = "Choice 1 & 2"),
    q1n3 = c(3,NA,-2, 1,-2) |> labelled(c(ch1=1, ch2=2, ch3 = 3, ch4=4), label = "Choice 3 & 4"),
    q1n4 = c(4,-2,-2, 3,-2) |> labelled(c(ch1=1, ch2=2, ch3 = 3, ch4=4), label = "Choice 3 & 4"),
    age  = c(2, 1, 3, 3, 2) |> labelled(c("18-39" = 1, "40-59" = 2, "60+" = 3), label = "age"),
    sel1 = c(1, 2, 3, 2, 3) |> labelled(c("sel1" = 1, "sel2" = 2, sel3 = 3)),
    sel2 = c(1, 3, 2, 1, 2) |> labelled(c("sel1" = 1, "sel2" = 2, sel3 = 3)),
    gew = c(0.5, 1.2, 0.4, 0.9, 1.3)
)
df
```

## Syntax to generate crosstabs

This is an example how you can generate tables along the y axis of the
crosstabs:

```{webr}
#| autorun: true
dfq <- tibble::tribble(
    ~Abbreviation, ~Title,             ~Type, ~RowVar,               ~SelVar,     ~SelVal,
    "mdg",         "mdg without Mult", "mdg", "q1_1 q1_2 q1_3 q1_4", "sel1 sel2", "2-3:sel2_&_3",
    "mcg",         "mcg without Mult", "mcg", "q1n1 q1n2 q1n3 q1n4", "sel1 sel2", "2-3:sel2_&_3",
    "mw",          "mw without Mult",  "mw",  "q1n1 q1n2 q1n3 q1n4", "sel1 sel2", "1-2:sel1_&_2",
)
dfq
```

To define the columns along the x-axis of the crosstabs, you just need
to define a character vector of variable names (cf. `df`):

```{webr}
ColVar <- "age"
```

## Calculate crosstabs {#sec-calc-ct}

If you have modified the input data above, running this cell will
reprint[^2] the calculated crosstabs, and recalculate the according data
input for the table_charter app at the bottom of this website:

[^2]: Unlike this wasm version in your browser, running the crosstabser
    R package in RStudio will give you a color-formatted print output.

```{webr}
#| autorun: true
#| define:
#|   - data_string
mapping_file = list(Questions = dfq, Macro = list(ColVar = ColVar))

m_selvar <- Tabula$new(
  df,
  mapping_file,
)
print(m_selvar)
m_selvar$prepare_5_tables()
l <- m_selvar$crosstabs$data |> purrr::set_names(c("Tab", "Val", "Row", "Head", "Col"))
l$Val <- l$Val |> tidyr::drop_na(Value)

data_string <- list(type = "table-object", data = l) |>
  jsonlite::toJSON(
    dataframe = "columns",
    na = "null",
    null = "null",
    auto_unbox = TRUE
  ) |> as.character()
```

## table_charter {#sec-tab-ch}

The table_charter app can be included in an html file by loading the
package's source code with for instance:

```{html}
#| eval: false
<script type="module"> 
  import { TableCharter } from "https://unpkg.com/table_charter/dist/main.es.js"
</script>
```

and then adding a `<table-charter>` html tag with the crosstab data from
R as its data attribute[^3]:

[^3]: Here we use [observable's hypertext
    literal](https://observablehq.com/@observablehq/htl) to generate the
    html in a quarto ojs cell. 

```{ojs}
//| echo: fenced
html`<table-charter data='${data_string}'></table-charter>`
```
